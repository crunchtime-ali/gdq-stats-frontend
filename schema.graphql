"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

input CreateEventTypeInput {
  description: String!
  name: String!
}

scalar Date

input DeleteEventTypeInput {
  id: ID!
}

type Event {
  donations: Float!
  donors: Int!
  eventType: EventType!
  games_completed: Int!
  id: ID!
  scheduleId: Int!
  start_date: Date!
  tweets: Int!
  twitch_chats: Int!
  viewers: Int!
  year: Int!
}

input EventDataInput {
  name: String!
  year: Int!
}

type EventDataResponse {
  eventData: [EventDatum]!
  eventDataType: EventDataType!
}

enum EventDataType {
  DONATIONS
  DONATIONS_PER_MINUTE
  DONORS
  TWEETS
  TWEETS_PER_MINUTE
  TWITCH_CHATS
  TWITCH_CHATS_PER_MINUTE
  VIEWERS
}

type EventDatum {
  donations: Float!
  donations_per_minute: Float!
  donors: Int!
  timestamp: Date!
  tweets: Int!
  tweets_per_minute: Int!
  twitch_chats: Int!
  twitch_chats_per_minute: Int!
  viewers: Int!
}

type EventType {
  description: String!
  id: ID!
  name: String!
}

type Game {
  duration: String!
  end_date: Date!
  id: ID!
  name: String!
  runner: String!
  start_date: Date!
}

input GetEventDataInput {
  event: EventDataInput
  eventDataType: EventDataType!
}

input GetGamesInput {
  name: String!
  year: Int!
}

input MigrateEventDataInput {
  id: ID!
}

type Mutation {
  createEventType(input: CreateEventTypeInput!): EventType!
  deleteEventType(input: DeleteEventTypeInput!): EventType!
  migrateEventData(input: MigrateEventDataInput!): Event!
  updateEventType(input: UpdateEventTypeInput!): EventType!
}

type Query {
  getAlternativeEvents: [Event!]!
  getCurrentEvent: Event!
  getEventData(input: GetEventDataInput): EventDataResponse!
  getEventTypes: [EventType!]!
  getEvents: [Event!]!
  getGames(input: GetGamesInput): [Game!]!
}

input UpdateEventTypeInput {
  description: String
  id: ID!
  name: String
}
